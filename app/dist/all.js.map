{"version":3,"sources":["global/script.js","global/vue.js","global/_global.js","VueComps/alert-blocker.js","VueComps/comment.js","VueComps/commentor.js","VueComps/interaction.js","VueComps/thread.js"],"names":["console","log","app","VueApp","Vue","createApp","data","test","dataObj","comments","currentUser","sendAction","deletWarning","idCounter","mounted","this","fetcher","methods","[object Object]","localStorage","getItem","fetch","then","res","json","updateLocal","catch","err","message","JSON","parse","setItem","stringify","key","id","score","alter","newThread","content","user","replies","push","iden","idenValue","surg","surgValue","index","Array","isArray","global","init","loadHeader","async","updater","responce","component","emits","props","template","$emit","computed","commentData","type","Object","required","reply","Boolean","editMode","isCurrentUser","currentUserCheck","username","x","document","getElementById","value","editToggle","image","png","action","commentBy","created","context","status","commentin"],"mappings":"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","file":"all.js","sourcesContent":["console.log(\"Load script.js\");  \r\n\r\n// Instantiating the global app object\r\nvar app = {}; \r\n\r\n","// Vue \r\nconst VueApp = Vue.createApp({ \r\n    data: function() {\r\n        return { \r\n            test: 'heeeee' \r\n            ,dataObj: {}\r\n            ,comments: []\r\n            ,currentUser: {}\r\n            ,sendAction: true // true for send, false for reply\r\n            ,deletWarning: false\r\n            ,idCounter: 4 // since we're starting with four total comments\r\n            \r\n        }\r\n    },\r\n    mounted: function () {\r\n        this.fetcher(); \r\n    },\r\n    methods: {\r\n        fetcher() {\r\n            if (localStorage.getItem(\"dataJson\") === null) { \r\n                fetch('./app/js/data/data.json')\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    this.dataObj = data;\r\n                    this.comments = data.comments; \r\n                    this.currentUser = data.currentUser;\r\n                    // updat local storage:\r\n                    this.updateLocal(data);\r\n                })\r\n                .catch((err) => console.log(err.message));\r\n            } else {\r\n                console.log(\"getting data from local storage ...\");\r\n                let data = JSON.parse(localStorage.getItem(\"dataJson\"));\r\n                this.dataObj = data;\r\n                this.comments = data.comments;\r\n                this.currentUser = data.currentUser; \r\n            }\r\n        },\r\n        updateLocal(data) {\r\n            localStorage.setItem(\"dataJson\",JSON.stringify(data));\r\n        },\r\n        delAlert(key) { \r\n            this.deletWarning = true;\r\n        },\r\n        scoreUpdater(id,score) {\r\n            \r\n            let data = JSON.parse(localStorage.getItem(\"dataJson\"));\r\n            this.alter(data,'id', id, 'score', score);\r\n            // if (data.comments.find(x => x.id === id)) {\r\n            //     data.comments.find(x => x.id === id).score = score;\r\n            //     this.updateLocal(data);\r\n            // } else {\r\n\r\n            //     this.alter(data,'id', id, 'score', score);\r\n            // } \r\n        },\r\n        textUpdater(id,message) {\r\n            let data = JSON.parse(localStorage.getItem(\"dataJson\"));\r\n            this.alter(data,'id',id,'content',message)\r\n        },\r\n        addThread(message) {\r\n            let data = JSON.parse(localStorage.getItem(\"dataJson\"));\r\n\r\n            let newThread = {\r\n                id: ++this.idCounter,\r\n                content: message,\r\n                score: 0,\r\n                user: this.currentUser,\r\n                replies: []\r\n            }\r\n            \r\n            data.comments.push(newThread);\r\n            this.updateLocal(data);\r\n        },\r\n        alter(dataObj,iden,idenValue,surg,surgValue) {\r\n            \r\n            for(index in dataObj) {\r\n            \r\n                if (index == iden && dataObj[index] == idenValue) {\r\n                    dataObj[surg] = surgValue;\r\n                }\r\n    \r\n                if (Array.isArray(dataObj[index]) || typeof dataObj[index] === 'object') {\r\n                    this.alter(dataObj[index],iden,idenValue,surg,surgValue);\r\n                }\r\n                \r\n            }\r\n            this.updateLocal(dataObj); \r\n        }\r\n    }\r\n}); \r\n\r\n\r\n","// Global\r\napp.global = {\r\n    init: function(){ // Load all global functions here\r\n        console.log(\"load global functions\");\r\n        app.global.loadHeader();\r\n    },\r\n    loadHeader: function(){ // Some specific function\r\n        console.log(\"loadHeader()\");\r\n        \r\n    },\r\n    fetcher: async function (updater) {\r\n        console.log(\"fetcher entered\");\r\n        const responce = await fetch('./app/js/data/data.json');\r\n        let data = await responce.json();\r\n        \r\n        \r\n        updater(data);\r\n    }\r\n};\r\n\r\n// Run the global stuff\r\napp.global.init();\r\n\r\n// methods of getting the body of the promise from fetcher: \r\n\r\n//1) IIFE (Immediately invoked function expression) for using await at the top level\r\n\r\n// (async function() {\r\n//     let dataObj = await app.global.fetcher(); \r\n//     console.log(dataObj);\r\n// })();\r\n\r\n\r\n//2) using a callback functino:\r\n \r\n// function updater(data) {\r\n//     // the code in here will run whenever the fetcher finishes\r\n//     console.log(data);\r\n//     console.log(\"HELLLOOOO\");\r\n//     return data; \r\n// }\r\n// app.global.fetcher(updater); // here we are passing the updater function as a callback function\r\n\r\n\r\n","VueApp.component('alert-blocker', {\r\n    emits: ['alert-cancel'],\r\n    props: {\r\n        \r\n    },\r\n    template:\r\n    /* html */\r\n    `\r\n    <div class=\"alertBlocker\">\r\n        <div class=\"deleteAlert\">\r\n            <h1>Delete comment</h1>\r\n            <p>Are you sure you want to delete this comment? This will remove the comment and can't be undone.</p>\r\n            <button @click=\"cancel\">NO, CANCEL</button>\r\n            <button>YES, DELETE</button>\r\n        </div>\r\n    </div>\r\n    `,\r\n    data: function () {\r\n        return {\r\n            \r\n        }\r\n    },\r\n    methods: {\r\n        cancel() {\r\n            this.$emit('alert-cancel');\r\n        }\r\n    },\r\n    computed: {\r\n        \r\n    }\r\n});","VueApp.component('comment', {\r\n    emits:['isReply','del-alert','score','text'],\r\n    props: {\r\n        commentData: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        user: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        reply: {\r\n            type: Boolean,\r\n            required: true\r\n        }\r\n    }, \r\n    template: \r\n    /* html */\r\n    `\r\n    <div class=\"comment\">\r\n        <div class=\"votes\">\r\n            <div class=\"upvote\" @click=\"updateScore(1)\"><img src=\"./images/icon-plus.svg\" alt=\"up vote\"></div>\r\n            <div class=\"voteNumber\">{{score}}</div>\r\n            <div class=\"downvote\" @click=\"updateScore(-1)\"><img src=\"./images/icon-minus.svg\" alt=\"down vote\"></div>\r\n        </div>\r\n        <div class=\"commentInfo\">\r\n            <img :src=\"image\" alt=\"image-amyrobson\" class=\"icon\">\r\n            <span class=\"username\">{{commentData.user.username}}</span>\r\n            <div class=\"you\" v-show=\"isCurrentUser\"><span>you</span></div>\r\n            <p class=\"date\">{{commentData.createdAt}}</p>\r\n        </div>\r\n        <div class=\"action\">\r\n            <div class=\"reply\" v-show=\"!isCurrentUser && !reply\" @click=\"replyEmiter\">\r\n                <img src=\"./images/icon-reply.svg\" alt=\"reply\">\r\n                <span>Reply</span>\r\n            </div>\r\n            <div class=\"reply\" v-show=\"!isCurrentUser && reply\" @click=\"replyEmiter\">\r\n                <img src=\"./images/icon-reply.svg\" alt=\"reply\">\r\n                <span>Cancel Reply</span>\r\n            </div>\r\n            <div class=\"delete\" v-show=\"isCurrentUser\" @click=\"deletEmiter\">\r\n                <img src=\"./images/icon-delete.svg\" alt=\"delete\">\r\n                <span>Delete</span>\r\n            </div>\r\n            <div class=\"edit\" v-show=\"isCurrentUser && !editMode\" @click=\"editToggle\">\r\n                <img src=\"./images/icon-edit.svg\" alt=\"Edit\">\r\n                <span>Edit</span>\r\n            </div>\r\n            <div class=\"edit\" v-show=\"isCurrentUser && editMode\" @click=\"editToggle\">\r\n                <img src=\"./images/icon-edit.svg\" alt=\"Edit\">\r\n                <span>Discard</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"content\" v-show=\"!editMode\"><p>{{commentData.content}}</p>\r\n        </div>\r\n        <textarea name=\"comment\" :id=\"textId\" cols=\"30\" rows=\"3\" placeholder=\"Add a comment...\" v-show=\"editMode\">{{commentData.content}}</textarea>\r\n        <button v-show=\"editMode\" @click=\"updateText\">UPDATE</button>\r\n    </div>\r\n    `,\r\n    data: function () { \r\n        return { \r\n            editMode: false,\r\n            isCurrentUser: this.currentUserCheck(),\r\n            score: this.commentData.score\r\n        }\r\n    },\r\n    methods: { \r\n        currentUserCheck() {\r\n            if (this.user.username == this.commentData.user.username) {\r\n                return true;\r\n            }else return false; \r\n        },\r\n        editToggle() {\r\n            if (this.editMode) {\r\n                this.editMode = false;\r\n            } else {\r\n                this.editMode = true; \r\n            }\r\n        },\r\n        replyEmiter() {\r\n            if (this.reply) {\r\n                this.$emit('isReply',false);\r\n            } else {\r\n                this.$emit('isReply',true);\r\n            }\r\n        },\r\n        deletEmiter() {\r\n            this.$emit('del-alert');\r\n        },\r\n        updateScore(x) {\r\n            if (x > 0) {\r\n                this.score++; \r\n                // updating local storage: \r\n                this.$emit('score',this.commentData.id,this.score);\r\n            } else {\r\n                if (this.score > 0) {\r\n                    this.score--;\r\n                    // updating local storage: \r\n                    this.$emit('score',this.commentData.id,this.score);\r\n                }\r\n            }\r\n\r\n            \r\n        },\r\n        updateText() {\r\n            const message = document.getElementById(\"text\"+this.commentData.id+\"\").value;\r\n            this.commentData.content = message; \r\n            this.$emit('text',this.commentData.id,message);\r\n            this.editToggle(); \r\n        }\r\n    },\r\n    computed: {\r\n        image() {return this.commentData.user.image.png}\r\n        ,textId() {return \"text\"+this.commentData.id+\"\"} \r\n        \r\n    }\r\n});","VueApp.component('commentor', {\r\n    emits: ['new-thread'], \r\n    props: {\r\n        user: {\r\n            type: Object\r\n            ,required: true\r\n        },\r\n        action: {\r\n            type: Boolean,\r\n            required: true\r\n        },\r\n        commentBy: {\r\n            type: Object,\r\n            required: false // it works that way \r\n        }\r\n    },\r\n    template: \r\n    /* html */\r\n    `\r\n    <div class=\"commentor\" id=\"commentor\">\r\n        <img :src=\"avatar\" :alt=\"avatarOf\" class=\"avatar\">\r\n        <textarea name=\"comment\" id=\"text\" cols=\"30\" rows=\"3\" placeholder=\"Add a comment...\" :class=\"(!this.action)? 'rep':''\">{{ filler }}</textarea>\r\n        <button v-show=\"this.action\" @click=\"addThread()\">send</button>\r\n        <button v-show=\"!this.action\">reply</button>\r\n    </div>\r\n    `, \r\n    data: function () {\r\n        return {\r\n            // isReply: false\r\n        }\r\n    },\r\n    created: function () {\r\n        \r\n        // console.log(this.user.image.png); \r\n        \r\n    },\r\n    methods: {\r\n        addThread() {\r\n            const message = document.getElementById('text').value;\r\n            this.$emit('new-thread',message);\r\n        } \r\n    },\r\n    computed: { \r\n        avatar() {return this.user.image.png}  \r\n        ,avatarOf() {return \"avatar of \" + this.user.username} \r\n        ,updater() {return this.user.image.png},\r\n        filler() {return (!this.action)? \"@\"+this.commentBy+\", \":\"\"}\r\n        \r\n    } \r\n    \r\n});","VueApp.component('interaction', {\r\n    emits: ['del','score','text'],\r\n    props: {\r\n        context: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        user: {\r\n            type: Object,\r\n            required: true\r\n        }\r\n    },\r\n    template: \r\n    /* html */\r\n    `\r\n    <comment :commentData=\"context\" :user=\"user\" :reply=\"reply\" @isReply=\"replyToggle\" @del-alert=\"deletAlert\" @score=\"scoreUpdater\" @text=\"textUpdater\"></comment>\r\n    <commentor v-if=\"user.image\" :user=\"user\" v-show=\"reply\" :action=\"sendAction\" :commentBy=\"context\"></commentor> \r\n    `, \r\n    data: function () {\r\n     return {\r\n        reply: false,\r\n        sendAction: false\r\n     }   \r\n    },\r\n    methods: {\r\n        replyToggle(status) {\r\n            if (status) {\r\n                this.reply = true; \r\n            } else {\r\n                this.reply = false; \r\n            }\r\n        },\r\n        deletAlert() {\r\n            this.$emit('del');\r\n        },\r\n        scoreUpdater(id,score) {\r\n            this.$emit('score',id,score);\r\n        },\r\n        textUpdater(id,message) {\r\n            this.$emit('text',id,message);\r\n        }\r\n    },\r\n    computed: {\r\n\r\n    }\r\n});","VueApp.component('thread', {\r\n    emits: ['score','text'], \r\n    props: {\r\n        commentin: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        user: {\r\n            type: Object,\r\n            required:true\r\n        }\r\n    },\r\n    template:  \r\n    /* html */\r\n    `\r\n    <div class=\"thread\"> \r\n        <interaction :context=\"commentin\" :user=\"user\" @del=\"alert(commentin.id)\" :key=\"commentin.id\" @score=\"scoreUpdater\" @text=\"textUpdater\"></interaction>\r\n        <div class=\"replys\" v-show=\"isReplied\">\r\n            <interaction v-for=\"(reply,index) in commentin.replies\" :user=\"user\" :context=\"reply\" @del=\"alert(index)\" :key=\"reply.id\" @score=\"scoreUpdater\" @text=\"textUpdater\"></interaction> \r\n        </div>\r\n    </div>\r\n    `,\r\n    data: function () {\r\n     return {  \r\n         \r\n     }\r\n    },\r\n    methods: { \r\n        alert(key) {\r\n            this.$emit('delete',key);\r\n        },\r\n        scoreUpdater(id,score) {\r\n            this.$emit('score',id,score);\r\n        },\r\n        textUpdater(id,message) {\r\n            this.$emit('text',id,message);\r\n        }\r\n    },\r\n    computed: {\r\n        isReplied() {return (this.commentin.replies <= 0)? false:true} \r\n    }\r\n});"]}